buildscript {
    repositories {
        maven {
            url 'http://central.maven.org/maven2/'
        }
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:2.1.2.RELEASE')
    }
}

plugins {
    id "org.flywaydb.flyway" version "5.2.4"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = 10

group 'landi.test'
version '0.1.0'

repositories {
    maven {
        url 'http://central.maven.org/maven2/'
    }
}

dependencies {
    //Spring boot
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")

    //Extra libraries
    compile("org.projectlombok:lombok:1.18.4")
    compile("se.michaelthelin.spotify:spotify-web-api-java:2.1.2")
    compile("org.apache.commons:commons-lang3:3.8.1")

    //Database
    compile("org.mariadb.jdbc:mariadb-java-client:2.1.0")

    //Annotation Processors
    annotationProcessor("org.projectlombok:lombok:1.18.4")

    //Tests
    testCompile("org.projectlombok:lombok:1.18.4")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.4")
    testCompile("junit:junit:4.12")
    testCompile("org.junit.jupiter:junit-jupiter-api:5.2.0")
    testCompile("org.junit.jupiter:junit-jupiter-params:5.2.0")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.2.0")
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'junit'
    }
    testRuntime("com.h2database:h2:1.4.197")
}

//Flyway configuration
flyway {
    url = 'jdbc:mariadb://localhost:3306/vdsale'
    user = 'root'
    password = '123456'
}
//Flyway configuration END

//Test configurations
//Changing logging and properties
test {
    minHeapSize = "512m"
    maxHeapSize = "1024m"
    ignoreFailures = false

    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        exceptionFormat "full"

        debug {
            events "PASSED", "FAILED", "SKIPPED", "STARTED"
        }
    }
}

//setting the Application Tests source
sourceSets {
    testApplication {
        java {
            compileClasspath += sourceSets.main.output + configurations.testCompile
            runtimeClasspath += output + compileClasspath + configurations.testRuntime
            srcDir file('src/testApplication/java')
        }
        resources.srcDir 'src/testApplication/resources'
    }
}

//creating the task to run the application tests
task testApplication(type: Test, dependsOn: build) {
    minHeapSize = "512m"
    maxHeapSize = "1024m"
    ignoreFailures = false

    testClassesDirs = sourceSets.testApplication.output.classesDirs
    classpath = sourceSets.testApplication.runtimeClasspath
    outputs.upToDateWhen { false }

    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        exceptionFormat "full"

        debug {
            events "PASSED", "FAILED", "SKIPPED", "STARTED"
        }
    }
}

//Report for test errors
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}
//Test configurations END